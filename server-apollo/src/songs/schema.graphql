type Song {
  "The ID of the song"
  id: ID!
  "The name of the song"
  name: String!
  "The user of the song"
  user: User!
  "The genre of the song"
  genre: Genre!
}

type Query {
  "Get all songs"
  songs(genreId: ID, limit: Int, offset: Int): [Song!]!
  "Get a song by ID"
  song(id: ID!): Song!
}

type Mutation {
  "Create a new song"
  createSong(input: CreateSongInput!): CreateSongResponse!
  "Update a new song"
  updateSong(input: UpdateSongInput!, id: ID!): UpdateSongResponse!
  "Delete a song"
  deleteSong(id: ID!): DeleteSongResponse!
}

"""
The input for creating a new song
"""
input CreateSongInput {
  "The name of the song"
  name: String!
  "The genreId of the song"
  genreId: String!
}

"""
The input for updating a song
"""
input UpdateSongInput {
  "The name of the song"
  name: String
  "The genreId of the song"
  genreId: String
}

type CreateSongResponse {
  "Whether the song was created successfully"
  success: Boolean!
  "The created song"
  song: Song!
}

type UpdateSongResponse {
  "Whether the song was updated successfully"
  success: Boolean!
  "The updated song"
  song: Song!
}

type DeleteSongResponse {
  "Whether the song was deleted successfully"
  success: Boolean!
  "The ID of the deleted song"
  id: ID!
}
