type Genre {
    "The ID of the genre"
    id: ID!
    "The name of the genre"
    name: String!
    "All songs of the genre"
    songs(pagination: PaginationInput): [Song!]
    "Count song of the genre"
    songsCount: Int
}

type Query {
    "Get all genres"
    genres: [Genre!]!
    "Get genre by ID"
    genre(id: ID!): Genre!
}

type Mutation {
    "Create a new Genre"
    createGenre(input: CreateGenreInput!): CreateGenreResponse!
    "Update a genre"
    updateGenre(id: ID!, input: CreateGenreInput): CreateGenreResponse!
    "Delete a genre"
    deleteGenre(id: ID!): DeleteGenreResponse!
}

"""
The input for creating a new genre
"""
input CreateGenreInput {
    "The name of the genre"
    name: String!
}

type CreateGenreResponse {
    "Whether the genre was created successfully"
    success: Boolean!
    "The created genre"
    genre: Genre!
}

type DeleteGenreResponse {
    "Whether the genre was created successfully"
    success: Boolean!
}