type User {
  "The ID of the user"
  id: ID!
  "The name of the user"
  name: String!
  "The songs of the user"
  songs(limit: Int, offset: Int): [Song!]!
  songsCount: Int!
}

type Query {
  "Get all users"
  users(limit: Int, offset: Int): [User!]!
  "Get a user by ID"
  user(id: ID!): User!
  "Pagination"
  usersConnection(first: Int!, after: String): UserConnection!
}

type Mutation {
  "Create a new user"
  createUser(input: CreateUserInput!): CreateUserResponse!
  "Method to update a user"
  updateUser(input: UpdateUserInput!): User!
  "Method to delete a user"
  deleteUser(id: ID!): Boolean!
}

"""
The input for creating a new user
"""
input CreateUserInput {
  "The name of the user"
  name: String!
}

type CreateUserResponse {
  "Whether the user was created successfully"
  success: Boolean!
  "The created user"
  user: User!
}

input UpdateUserInput {
  id: ID!
  name: String
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  node: User!
  cursor: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}