type User {
  "The ID of the user"
  id: ID!
  "The name of the user"
  name: String!
  "The songs of the user"
  songs(limit: Int, offset: Int): [Song!]!
  songsCount: Int!
}

type Query {
  "Get all users with pagination"
  users(limit: Int, offset: Int): [User!]!
  "Get a user by ID"
  user(id: ID!): User!
}

type Mutation {
  "Create a new user"
  createUser(input: CreateUserInput!): CreateUserResponse!
  # Modifier un utilisateur existant
  updateUser(id: ID!, input: UpdateUserInput!): UpdateUserResponse!
  deleteUser(id: ID!): DeleteUserResponse!
}

"""
The input for creating a new user
"""
input CreateUserInput {
  "The name of the user"
  name: String!
}

type CreateUserResponse {
  "Whether the user was created successfully"
  success: Boolean!
  "The created user"
  user: User!
}

input UpdateUserInput {
  name: String
}

type UpdateUserResponse {
  success: Boolean!
  user: User
  message: String
}

type DeleteUserResponse {
  success: Boolean!
  message: String
}
