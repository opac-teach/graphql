type User {
  "The ID of the user"
  id: ID!
  "The name of the user"
  name: String!
  "The songs of the user"
  songs: [Song!]!
  "The number of songs"
  songsCount: Float!
  "The role of the user"
  role: EnumRole!
}

enum EnumRole {
  "The user is an admin"
  ADMIN
  "The user is a regular user"
  USER
}

type Query {
  "Get all users"
  users(limit: Int, offset: Int): [User!]!
  "Get a user by ID"
  user(id: ID!): User!
}

type Mutation {
  "Create a new user"
  createUser(input: CreateUserInput!): CreateUserResponse!
  "Update a user"
  updateUser(input: UpdateUserInput!, id: ID!): UpdateUserResponse!
  "Delete a user"
  deleteUser(id: ID!): DeleteUserResponse!
}

"""
The input for creating a new user
"""
input CreateUserInput {
  "The name of the user"
  name: String!
}

"""
The input for updating a user
"""
input UpdateUserInput {
  "The name of the user"
  name: String
}

type CreateUserResponse {
  "Whether the user was updated successfully"
  success: Boolean!
  "The updated user"
  user: User!
}

type UpdateUserResponse {
  "Whether the user was updated successfully"
  success: Boolean!
  "The updated user"
  user: User!
}

type DeleteUserResponse {
  "Whether the user was deleted successfully"
  success: Boolean!
  "The deleted userId"
  id: ID!
}
